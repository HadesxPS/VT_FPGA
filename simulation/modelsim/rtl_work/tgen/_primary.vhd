library verilog;
use verilog.vl_types.all;
entity tgen is
    generic(
        IDLE            : vl_logic_vector(0 to 2) := (Hi0, Hi0, Hi0);
        \GRST\          : vl_logic_vector(0 to 2) := (Hi0, Hi0, Hi1);
        VBP             : vl_logic_vector(0 to 2) := (Hi0, Hi1, Hi0);
        PCH             : vl_logic_vector(0 to 2) := (Hi0, Hi1, Hi1);
        DISPLAY         : vl_logic_vector(0 to 2) := (Hi1, Hi0, Hi0);
        VFP             : vl_logic_vector(0 to 2) := (Hi1, Hi0, Hi1);
        NUM_CLK_GRST    : integer := 5;
        H_ACT           : vl_logic_vector(0 to 11) := (Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0);
        H_BP            : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi1);
        H_FP            : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi1);
        V_BP            : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi0, Hi0);
        V_FP            : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi1);
        V_ACT           : vl_logic_vector(0 to 11) := (Hi1, Hi0, Hi0, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0);
        V_PCH           : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0);
        H_ABGN          : vl_notype;
        H_AEND          : vl_notype;
        H_TOTAL         : vl_notype;
        GAP_VDIV64      : vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi1, Hi1, Hi1, Hi1, Hi0);
        STV1_WIDTH      : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        STV1_TOTAL_DIRE : vl_logic := Hi1;
        STV1_TOTAL_SHIFT: vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi0);
        STV1_RISE_DIRE  : vl_logic := Hi1;
        STV1_RISE_SHIFT : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi1, Hi1, Hi0, Hi0);
        STV1_FALL_DIRE  : vl_logic := Hi1;
        STV1_FALL_SHIFT : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        STV2_WIDTH      : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        STV2_TOTAL_DIRE : vl_logic := Hi1;
        STV2_TOTAL_SHIFT: vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        STV2_RISE_DIRE  : vl_logic := Hi1;
        STV2_RISE_SHIFT : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi1, Hi1, Hi0, Hi0);
        STV2_FALL_DIRE  : vl_logic := Hi1;
        STV2_FALL_SHIFT : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        CKV_RISE_SHIFT  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi0, Hi1);
        CKV_FALL_SHIFT  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi0, Hi1);
        CKH_PRE_GAP     : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0);
        CKH_WIDTH       : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        CKH_RISE_SHIFT  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi1);
        CKH_FALL_SHIFT  : vl_logic_vector(0 to 11) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi1);
        DCODE_WHITE     : vl_logic_vector(0 to 7) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1);
        DCODE_BLACK     : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1);
        DCODE_VCOM      : vl_logic_vector(0 to 7) := (Hi0, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0);
        DCODE_GND       : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        DCODE_GRAY128   : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi1);
        DCODE_GRAY64    : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0);
        DCODE_VCOMA     : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        DCODE_VCOMB     : vl_logic_vector(0 to 7) := (Hi1, Hi0, Hi1, Hi0, Hi1, Hi1, Hi0, Hi0);
        SRC_PCH_SHIFT   : vl_logic_vector(0 to 7) := (Hi0, Hi1, Hi1, Hi0, Hi0, Hi1, Hi0, Hi0);
        ODD_EVEN_TGAP   : vl_logic_vector(0 to 7) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1)
    );
    port(
        clk             : in     vl_logic;
        rst_n           : in     vl_logic;
        grst            : out    vl_logic;
        gas             : out    vl_logic;
        jdqi            : out    vl_logic;
        VTCOMSW1        : out    vl_logic;
        VTCOMSW2        : out    vl_logic;
        u2d             : out    vl_logic;
        d2u             : out    vl_logic;
        stv1            : out    vl_logic;
        stv2            : out    vl_logic;
        ckv1            : out    vl_logic;
        ckv2            : out    vl_logic;
        ckv3            : out    vl_logic;
        ckv4            : out    vl_logic;
        ckv5            : out    vl_logic;
        ckv6            : out    vl_logic;
        ckv7            : out    vl_logic;
        ckv8            : out    vl_logic;
        ckh1            : out    vl_logic;
        ckh2            : out    vl_logic;
        ckh3            : out    vl_logic;
        ckh4            : out    vl_logic;
        ckh5            : out    vl_logic;
        ckh6            : out    vl_logic;
        dis_sn          : in     vl_logic_vector(6 downto 0);
        da1_wr          : out    vl_logic;
        da2_wr          : out    vl_logic;
        da3_wr          : out    vl_logic;
        da4_wr          : out    vl_logic;
        da1_a           : out    vl_logic_vector(1 downto 0);
        da2_a           : out    vl_logic_vector(1 downto 0);
        da3_a           : out    vl_logic_vector(1 downto 0);
        da4_a           : out    vl_logic_vector(1 downto 0);
        da1_din         : out    vl_logic_vector(7 downto 0);
        da2_din         : out    vl_logic_vector(7 downto 0);
        da3_din         : out    vl_logic_vector(7 downto 0);
        da4_din         : out    vl_logic_vector(7 downto 0);
        flag_black_on   : in     vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of IDLE : constant is 1;
    attribute mti_svvh_generic_type of \GRST\ : constant is 1;
    attribute mti_svvh_generic_type of VBP : constant is 1;
    attribute mti_svvh_generic_type of PCH : constant is 1;
    attribute mti_svvh_generic_type of DISPLAY : constant is 1;
    attribute mti_svvh_generic_type of VFP : constant is 1;
    attribute mti_svvh_generic_type of NUM_CLK_GRST : constant is 1;
    attribute mti_svvh_generic_type of H_ACT : constant is 1;
    attribute mti_svvh_generic_type of H_BP : constant is 1;
    attribute mti_svvh_generic_type of H_FP : constant is 1;
    attribute mti_svvh_generic_type of V_BP : constant is 1;
    attribute mti_svvh_generic_type of V_FP : constant is 1;
    attribute mti_svvh_generic_type of V_ACT : constant is 1;
    attribute mti_svvh_generic_type of V_PCH : constant is 1;
    attribute mti_svvh_generic_type of H_ABGN : constant is 3;
    attribute mti_svvh_generic_type of H_AEND : constant is 3;
    attribute mti_svvh_generic_type of H_TOTAL : constant is 3;
    attribute mti_svvh_generic_type of GAP_VDIV64 : constant is 1;
    attribute mti_svvh_generic_type of STV1_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of STV1_TOTAL_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV1_TOTAL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of STV1_RISE_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV1_RISE_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of STV1_FALL_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV1_FALL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of STV2_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of STV2_TOTAL_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV2_TOTAL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of STV2_RISE_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV2_RISE_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of STV2_FALL_DIRE : constant is 1;
    attribute mti_svvh_generic_type of STV2_FALL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of CKV_RISE_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of CKV_FALL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of CKH_PRE_GAP : constant is 1;
    attribute mti_svvh_generic_type of CKH_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CKH_RISE_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of CKH_FALL_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of DCODE_WHITE : constant is 1;
    attribute mti_svvh_generic_type of DCODE_BLACK : constant is 1;
    attribute mti_svvh_generic_type of DCODE_VCOM : constant is 1;
    attribute mti_svvh_generic_type of DCODE_GND : constant is 1;
    attribute mti_svvh_generic_type of DCODE_GRAY128 : constant is 1;
    attribute mti_svvh_generic_type of DCODE_GRAY64 : constant is 1;
    attribute mti_svvh_generic_type of DCODE_VCOMA : constant is 1;
    attribute mti_svvh_generic_type of DCODE_VCOMB : constant is 1;
    attribute mti_svvh_generic_type of SRC_PCH_SHIFT : constant is 1;
    attribute mti_svvh_generic_type of ODD_EVEN_TGAP : constant is 1;
end tgen;
